//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Compiler.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


    using System.Collections;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class CompilerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OR=1, AND=2, CONTINUE=3, BREAK=4, WHILE=5, WRITE=6, IF=7, ELSE=8, BOOL=9, 
		ID=10, INT=11, FLOAT=12, EOS=13, EQUALS=14, GT=15, LT=16, NOT=17, ADD=18, 
		SUB=19, DIV=20, MULT=21, LP=22, RP=23, LC=24, RC=25, ASSIGN=26, SPACE=27, 
		COMMENT_INPUT=28, LINE_COMMENT=29, NEWLINE=30;
	public const int
		RULE_compiler = 0, RULE_statement = 1, RULE_assignment = 2, RULE_expression = 3, 
		RULE_number = 4, RULE_condition = 5, RULE_if = 6, RULE_while = 7;
	public static readonly string[] ruleNames = {
		"compiler", "statement", "assignment", "expression", "number", "condition", 
		"if", "while"
	};

	private static readonly string[] _LiteralNames = {
		null, "'||'", "'&&'", "'continue'", "'break'", "'while'", "'Write'", "'if'", 
		"'else'", null, null, null, null, "';'", "'=='", "'>'", "'<'", "'!'", 
		"'+'", "'-'", "'/'", "'*'", "'('", "')'", "'{'", "'}'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OR", "AND", "CONTINUE", "BREAK", "WHILE", "WRITE", "IF", "ELSE", 
		"BOOL", "ID", "INT", "FLOAT", "EOS", "EQUALS", "GT", "LT", "NOT", "ADD", 
		"SUB", "DIV", "MULT", "LP", "RP", "LC", "RC", "ASSIGN", "SPACE", "COMMENT_INPUT", 
		"LINE_COMMENT", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Compiler.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CompilerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


	    public static Hashtable memory = new Hashtable();

		public CompilerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CompilerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompilerContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CompilerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compiler; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICompilerListener typedListener = listener as ICompilerListener;
			if (typedListener != null) typedListener.EnterCompiler(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICompilerListener typedListener = listener as ICompilerListener;
			if (typedListener != null) typedListener.ExitCompiler(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerVisitor<TResult> typedVisitor = visitor as ICompilerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompiler(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilerContext compiler() {
		CompilerContext _localctx = new CompilerContext(Context, State);
		EnterRule(_localctx, 0, RULE_compiler);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 16; statement();
				}
				}
				State = 19;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONTINUE) | (1L << BREAK) | (1L << WHILE) | (1L << WRITE) | (1L << IF) | (1L << ID))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public IToken @break;
		public IToken cont;
		public ITerminalNode WRITE() { return GetToken(CompilerParser.WRITE, 0); }
		public ITerminalNode LP() { return GetToken(CompilerParser.LP, 0); }
		public ITerminalNode ID() { return GetToken(CompilerParser.ID, 0); }
		public ITerminalNode RP() { return GetToken(CompilerParser.RP, 0); }
		public ITerminalNode EOS() { return GetToken(CompilerParser.EOS, 0); }
		public WhileContext @while() {
			return GetRuleContext<WhileContext>(0);
		}
		public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		public ITerminalNode BREAK() { return GetToken(CompilerParser.BREAK, 0); }
		public ITerminalNode CONTINUE() { return GetToken(CompilerParser.CONTINUE, 0); }
		public ITerminalNode ASSIGN() { return GetToken(CompilerParser.ASSIGN, 0); }
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICompilerListener typedListener = listener as ICompilerListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICompilerListener typedListener = listener as ICompilerListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerVisitor<TResult> typedVisitor = visitor as ICompilerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 37;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WRITE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 21; Match(WRITE);
				State = 22; Match(LP);
				State = 23; Match(ID);
				State = 24; Match(RP);
				State = 25; Match(EOS);
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 26; @while();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 3);
				{
				State = 27; @if();
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 4);
				{
				State = 28; _localctx.@break = Match(BREAK);
				State = 29; Match(EOS);
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 30; _localctx.cont = Match(CONTINUE);
				State = 31; Match(EOS);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 6);
				{
				State = 32; Match(ID);
				State = 33; Match(ASSIGN);
				State = 34; assignment();
				State = 35; Match(EOS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ConditionContext cond;
		public ExpressionContext exp;
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICompilerListener typedListener = listener as ICompilerListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICompilerListener typedListener = listener as ICompilerListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerVisitor<TResult> typedVisitor = visitor as ICompilerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 4, RULE_assignment);
		try {
			State = 41;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 39; _localctx.cond = condition(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 40; _localctx.exp = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext left;
		public IToken id;
		public IToken sign;
		public ExpressionContext right;
		public float val;
		public ITerminalNode LP() { return GetToken(CompilerParser.LP, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RP() { return GetToken(CompilerParser.RP, 0); }
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ITerminalNode ID() { return GetToken(CompilerParser.ID, 0); }
		public ITerminalNode DIV() { return GetToken(CompilerParser.DIV, 0); }
		public ITerminalNode MULT() { return GetToken(CompilerParser.MULT, 0); }
		public ITerminalNode ADD() { return GetToken(CompilerParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(CompilerParser.SUB, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICompilerListener typedListener = listener as ICompilerListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICompilerListener typedListener = listener as ICompilerListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerVisitor<TResult> typedVisitor = visitor as ICompilerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LP:
				{
				State = 44; Match(LP);
				State = 45; expression(0);
				State = 46; Match(RP);
				}
				break;
			case INT:
			case FLOAT:
				{
				State = 48; number();
				}
				break;
			case ID:
				{
				State = 49; _localctx.id = Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 66;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 64;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 52;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 53; _localctx.sign = Match(DIV);
						State = 54; _localctx.right = expression(8);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 55;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 56; _localctx.sign = Match(MULT);
						State = 57; _localctx.right = expression(7);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 58;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 59; _localctx.sign = Match(ADD);
						State = 60; _localctx.right = expression(6);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 61;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 62; _localctx.sign = Match(SUB);
						State = 63; _localctx.right = expression(5);
						}
						break;
					}
					} 
				}
				State = 68;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(CompilerParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(CompilerParser.FLOAT, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICompilerListener typedListener = listener as ICompilerListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICompilerListener typedListener = listener as ICompilerListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerVisitor<TResult> typedVisitor = visitor as ICompilerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 8, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			_la = TokenStream.LA(1);
			if ( !(_la==INT || _la==FLOAT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ConditionContext leftC;
		public ExpressionContext left;
		public IToken not;
		public ExpressionContext right;
		public IToken gt;
		public IToken lt;
		public ConditionContext rightC;
		public bool val;

		public ITerminalNode EQUALS() { return GetToken(CompilerParser.EQUALS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode NOT() { return GetToken(CompilerParser.NOT, 0); }
		public ITerminalNode GT() { return GetToken(CompilerParser.GT, 0); }
		public ITerminalNode LT() { return GetToken(CompilerParser.LT, 0); }
		public ITerminalNode BOOL() { return GetToken(CompilerParser.BOOL, 0); }
		public ITerminalNode ID() { return GetToken(CompilerParser.ID, 0); }
		public ITerminalNode AND() { return GetToken(CompilerParser.AND, 0); }
		public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		public ITerminalNode OR() { return GetToken(CompilerParser.OR, 0); }
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICompilerListener typedListener = listener as ICompilerListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICompilerListener typedListener = listener as ICompilerListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerVisitor<TResult> typedVisitor = visitor as ICompilerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		return condition(0);
	}

	private ConditionContext condition(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ConditionContext _localctx = new ConditionContext(Context, _parentState);
		ConditionContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_condition, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 72; _localctx.left = expression(0);
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 73; _localctx.not = Match(NOT);
					}
				}

				State = 76; Match(EQUALS);
				State = 77; _localctx.right = expression(0);
				}
				break;
			case 2:
				{
				State = 79; _localctx.left = expression(0);
				State = 80; _localctx.gt = Match(GT);
				State = 81; _localctx.right = expression(0);
				}
				break;
			case 3:
				{
				State = 83; _localctx.left = expression(0);
				State = 84; _localctx.lt = Match(LT);
				State = 85; _localctx.right = expression(0);
				}
				break;
			case 4:
				{
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 87; _localctx.not = Match(NOT);
					}
				}

				State = 90; Match(BOOL);
				}
				break;
			case 5:
				{
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 91; _localctx.not = Match(NOT);
					}
				}

				State = 94; Match(ID);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 105;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 103;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
					case 1:
						{
						_localctx = new ConditionContext(_parentctx, _parentState);
						_localctx.leftC = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_condition);
						State = 97;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 98; Match(AND);
						State = 99; _localctx.rightC = condition(5);
						}
						break;
					case 2:
						{
						_localctx = new ConditionContext(_parentctx, _parentState);
						_localctx.leftC = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_condition);
						State = 100;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 101; Match(OR);
						State = 102; _localctx.rightC = condition(4);
						}
						break;
					}
					} 
				}
				State = 107;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		public ConditionContext cond;
		public StatementContext state;
		public StatementContext altState;
		public ITerminalNode IF() { return GetToken(CompilerParser.IF, 0); }
		public ITerminalNode LP() { return GetToken(CompilerParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(CompilerParser.RP, 0); }
		public ITerminalNode[] LC() { return GetTokens(CompilerParser.LC); }
		public ITerminalNode LC(int i) {
			return GetToken(CompilerParser.LC, i);
		}
		public ITerminalNode[] RC() { return GetTokens(CompilerParser.RC); }
		public ITerminalNode RC(int i) {
			return GetToken(CompilerParser.RC, i);
		}
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(CompilerParser.ELSE, 0); }
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICompilerListener typedListener = listener as ICompilerListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICompilerListener typedListener = listener as ICompilerListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerVisitor<TResult> typedVisitor = visitor as ICompilerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 12, RULE_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(IF);
			State = 109; Match(LP);
			State = 110; _localctx.cond = condition(0);
			State = 111; Match(RP);
			State = 112; Match(LC);
			State = 113; _localctx.state = statement();
			State = 114; Match(RC);
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 115; Match(ELSE);
				State = 116; Match(LC);
				State = 117; _localctx.altState = statement();
				State = 118; Match(RC);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileContext : ParserRuleContext {
		public ConditionContext cond;
		public StatementContext state;
		public ITerminalNode WHILE() { return GetToken(CompilerParser.WHILE, 0); }
		public ITerminalNode LP() { return GetToken(CompilerParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(CompilerParser.RP, 0); }
		public ITerminalNode LC() { return GetToken(CompilerParser.LC, 0); }
		public ITerminalNode RC() { return GetToken(CompilerParser.RC, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public WhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICompilerListener typedListener = listener as ICompilerListener;
			if (typedListener != null) typedListener.EnterWhile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICompilerListener typedListener = listener as ICompilerListener;
			if (typedListener != null) typedListener.ExitWhile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerVisitor<TResult> typedVisitor = visitor as ICompilerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileContext @while() {
		WhileContext _localctx = new WhileContext(Context, State);
		EnterRule(_localctx, 14, RULE_while);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122; Match(WHILE);
			State = 123; Match(LP);
			State = 124; _localctx.cond = condition(0);
			State = 125; Match(RP);
			State = 126; Match(LC);
			State = 128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 127; _localctx.state = statement();
				}
				}
				State = 130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONTINUE) | (1L << BREAK) | (1L << WHILE) | (1L << WRITE) | (1L << IF) | (1L << ID))) != 0) );
			State = 132; Match(RC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 5: return condition_sempred((ConditionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		}
		return true;
	}
	private bool condition_sempred(ConditionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ' ', '\x89', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x3', '\x2', '\x6', '\x2', '\x14', '\n', '\x2', 
		'\r', '\x2', '\xE', '\x2', '\x15', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '(', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', ',', '\n', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', '\x35', '\n', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\a', '\x5', '\x43', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 
		'\x46', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', 'M', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '[', 
		'\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '_', '\n', '\a', '\x3', 
		'\a', '\x5', '\a', '\x62', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 'j', '\n', '\a', 
		'\f', '\a', '\xE', '\a', 'm', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '{', 
		'\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x6', '\t', '\x83', '\n', '\t', '\r', '\t', '\xE', 
		'\t', '\x84', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x2', '\x4', '\b', 
		'\f', '\n', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x2', 
		'\x3', '\x3', '\x2', '\r', '\xE', '\x2', '\x98', '\x2', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\'', '\x3', '\x2', '\x2', '\x2', '\x6', '+', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\x34', '\x3', '\x2', '\x2', '\x2', 
		'\n', 'G', '\x3', '\x2', '\x2', '\x2', '\f', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\xE', 'n', '\x3', '\x2', '\x2', '\x2', '\x10', '|', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x14', '\x5', '\x4', '\x3', '\x2', '\x13', '\x12', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x15', '\x13', '\x3', '\x2', '\x2', '\x2', '\x15', '\x16', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x3', '\x3', '\x2', '\x2', '\x2', '\x17', '\x18', 
		'\a', '\b', '\x2', '\x2', '\x18', '\x19', '\a', '\x18', '\x2', '\x2', 
		'\x19', '\x1A', '\a', '\f', '\x2', '\x2', '\x1A', '\x1B', '\a', '\x19', 
		'\x2', '\x2', '\x1B', '(', '\a', '\xF', '\x2', '\x2', '\x1C', '(', '\x5', 
		'\x10', '\t', '\x2', '\x1D', '(', '\x5', '\xE', '\b', '\x2', '\x1E', '\x1F', 
		'\a', '\x6', '\x2', '\x2', '\x1F', '(', '\a', '\xF', '\x2', '\x2', ' ', 
		'!', '\a', '\x5', '\x2', '\x2', '!', '(', '\a', '\xF', '\x2', '\x2', '\"', 
		'#', '\a', '\f', '\x2', '\x2', '#', '$', '\a', '\x1C', '\x2', '\x2', '$', 
		'%', '\x5', '\x6', '\x4', '\x2', '%', '&', '\a', '\xF', '\x2', '\x2', 
		'&', '(', '\x3', '\x2', '\x2', '\x2', '\'', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\'', '\x1C', '\x3', '\x2', '\x2', '\x2', '\'', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\'', '\x1E', '\x3', '\x2', '\x2', '\x2', '\'', ' ', 
		'\x3', '\x2', '\x2', '\x2', '\'', '\"', '\x3', '\x2', '\x2', '\x2', '(', 
		'\x5', '\x3', '\x2', '\x2', '\x2', ')', ',', '\x5', '\f', '\a', '\x2', 
		'*', ',', '\x5', '\b', '\x5', '\x2', '+', ')', '\x3', '\x2', '\x2', '\x2', 
		'+', '*', '\x3', '\x2', '\x2', '\x2', ',', '\a', '\x3', '\x2', '\x2', 
		'\x2', '-', '.', '\b', '\x5', '\x1', '\x2', '.', '/', '\a', '\x18', '\x2', 
		'\x2', '/', '\x30', '\x5', '\b', '\x5', '\x2', '\x30', '\x31', '\a', '\x19', 
		'\x2', '\x2', '\x31', '\x35', '\x3', '\x2', '\x2', '\x2', '\x32', '\x35', 
		'\x5', '\n', '\x6', '\x2', '\x33', '\x35', '\a', '\f', '\x2', '\x2', '\x34', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x34', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x33', '\x3', '\x2', '\x2', '\x2', '\x35', '\x44', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x37', '\f', '\t', '\x2', '\x2', '\x37', 
		'\x38', '\a', '\x16', '\x2', '\x2', '\x38', '\x43', '\x5', '\b', '\x5', 
		'\n', '\x39', ':', '\f', '\b', '\x2', '\x2', ':', ';', '\a', '\x17', '\x2', 
		'\x2', ';', '\x43', '\x5', '\b', '\x5', '\t', '<', '=', '\f', '\a', '\x2', 
		'\x2', '=', '>', '\a', '\x14', '\x2', '\x2', '>', '\x43', '\x5', '\b', 
		'\x5', '\b', '?', '@', '\f', '\x6', '\x2', '\x2', '@', '\x41', '\a', '\x15', 
		'\x2', '\x2', '\x41', '\x43', '\x5', '\b', '\x5', '\a', '\x42', '\x36', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '<', '\x3', '\x2', '\x2', '\x2', '\x42', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x43', '\x46', '\x3', '\x2', '\x2', '\x2', '\x44', '\x42', '\x3', 
		'\x2', '\x2', '\x2', '\x44', '\x45', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x46', '\x44', '\x3', '\x2', '\x2', 
		'\x2', 'G', 'H', '\t', '\x2', '\x2', '\x2', 'H', '\v', '\x3', '\x2', '\x2', 
		'\x2', 'I', 'J', '\b', '\a', '\x1', '\x2', 'J', 'L', '\x5', '\b', '\x5', 
		'\x2', 'K', 'M', '\a', '\x13', '\x2', '\x2', 'L', 'K', '\x3', '\x2', '\x2', 
		'\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x3', '\x2', '\x2', 
		'\x2', 'N', 'O', '\a', '\x10', '\x2', '\x2', 'O', 'P', '\x5', '\b', '\x5', 
		'\x2', 'P', '\x62', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x5', '\b', 
		'\x5', '\x2', 'R', 'S', '\a', '\x11', '\x2', '\x2', 'S', 'T', '\x5', '\b', 
		'\x5', '\x2', 'T', '\x62', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x5', 
		'\b', '\x5', '\x2', 'V', 'W', '\a', '\x12', '\x2', '\x2', 'W', 'X', '\x5', 
		'\b', '\x5', '\x2', 'X', '\x62', '\x3', '\x2', '\x2', '\x2', 'Y', '[', 
		'\a', '\x13', '\x2', '\x2', 'Z', 'Y', '\x3', '\x2', '\x2', '\x2', 'Z', 
		'[', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\x3', '\x2', '\x2', '\x2', 
		'\\', '\x62', '\a', '\v', '\x2', '\x2', ']', '_', '\a', '\x13', '\x2', 
		'\x2', '^', ']', '\x3', '\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', 
		'\x2', '_', '`', '\x3', '\x2', '\x2', '\x2', '`', '\x62', '\a', '\f', 
		'\x2', '\x2', '\x61', 'I', '\x3', '\x2', '\x2', '\x2', '\x61', 'Q', '\x3', 
		'\x2', '\x2', '\x2', '\x61', 'U', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'Z', '\x3', '\x2', '\x2', '\x2', '\x61', '^', '\x3', '\x2', '\x2', '\x2', 
		'\x62', 'k', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\f', '\x6', 
		'\x2', '\x2', '\x64', '\x65', '\a', '\x4', '\x2', '\x2', '\x65', 'j', 
		'\x5', '\f', '\a', '\a', '\x66', 'g', '\f', '\x5', '\x2', '\x2', 'g', 
		'h', '\a', '\x3', '\x2', '\x2', 'h', 'j', '\x5', '\f', '\a', '\x6', 'i', 
		'\x63', '\x3', '\x2', '\x2', '\x2', 'i', '\x66', '\x3', '\x2', '\x2', 
		'\x2', 'j', 'm', '\x3', '\x2', '\x2', '\x2', 'k', 'i', '\x3', '\x2', '\x2', 
		'\x2', 'k', 'l', '\x3', '\x2', '\x2', '\x2', 'l', '\r', '\x3', '\x2', 
		'\x2', '\x2', 'm', 'k', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\a', '\t', 
		'\x2', '\x2', 'o', 'p', '\a', '\x18', '\x2', '\x2', 'p', 'q', '\x5', '\f', 
		'\a', '\x2', 'q', 'r', '\a', '\x19', '\x2', '\x2', 'r', 's', '\a', '\x1A', 
		'\x2', '\x2', 's', 't', '\x5', '\x4', '\x3', '\x2', 't', 'z', '\a', '\x1B', 
		'\x2', '\x2', 'u', 'v', '\a', '\n', '\x2', '\x2', 'v', 'w', '\a', '\x1A', 
		'\x2', '\x2', 'w', 'x', '\x5', '\x4', '\x3', '\x2', 'x', 'y', '\a', '\x1B', 
		'\x2', '\x2', 'y', '{', '\x3', '\x2', '\x2', '\x2', 'z', 'u', '\x3', '\x2', 
		'\x2', '\x2', 'z', '{', '\x3', '\x2', '\x2', '\x2', '{', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '|', '}', '\a', '\a', '\x2', '\x2', '}', '~', '\a', 
		'\x18', '\x2', '\x2', '~', '\x7F', '\x5', '\f', '\a', '\x2', '\x7F', '\x80', 
		'\a', '\x19', '\x2', '\x2', '\x80', '\x82', '\a', '\x1A', '\x2', '\x2', 
		'\x81', '\x83', '\x5', '\x4', '\x3', '\x2', '\x82', '\x81', '\x3', '\x2', 
		'\x2', '\x2', '\x83', '\x84', '\x3', '\x2', '\x2', '\x2', '\x84', '\x82', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x85', '\x86', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\a', '\x1B', 
		'\x2', '\x2', '\x87', '\x11', '\x3', '\x2', '\x2', '\x2', '\x10', '\x15', 
		'\'', '+', '\x34', '\x42', '\x44', 'L', 'Z', '^', '\x61', 'i', 'k', 'z', 
		'\x84',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
